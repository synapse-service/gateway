// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.12
// source: gateway/gateway.proto

package grpc

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// GatewayAPIClient is the client API for GatewayAPI service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GatewayAPIClient interface {
	Sync(ctx context.Context, in *SyncRequest, opts ...grpc.CallOption) (GatewayAPI_SyncClient, error)
}

type gatewayAPIClient struct {
	cc grpc.ClientConnInterface
}

func NewGatewayAPIClient(cc grpc.ClientConnInterface) GatewayAPIClient {
	return &gatewayAPIClient{cc}
}

func (c *gatewayAPIClient) Sync(ctx context.Context, in *SyncRequest, opts ...grpc.CallOption) (GatewayAPI_SyncClient, error) {
	stream, err := c.cc.NewStream(ctx, &GatewayAPI_ServiceDesc.Streams[0], "/gateway.GatewayAPI/Sync", opts...)
	if err != nil {
		return nil, err
	}
	x := &gatewayAPISyncClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type GatewayAPI_SyncClient interface {
	Recv() (*VideoNodeConfig, error)
	grpc.ClientStream
}

type gatewayAPISyncClient struct {
	grpc.ClientStream
}

func (x *gatewayAPISyncClient) Recv() (*VideoNodeConfig, error) {
	m := new(VideoNodeConfig)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// GatewayAPIServer is the server API for GatewayAPI service.
// All implementations must embed UnimplementedGatewayAPIServer
// for forward compatibility
type GatewayAPIServer interface {
	Sync(*SyncRequest, GatewayAPI_SyncServer) error
	mustEmbedUnimplementedGatewayAPIServer()
}

// UnimplementedGatewayAPIServer must be embedded to have forward compatible implementations.
type UnimplementedGatewayAPIServer struct {
}

func (UnimplementedGatewayAPIServer) Sync(*SyncRequest, GatewayAPI_SyncServer) error {
	return status.Errorf(codes.Unimplemented, "method Sync not implemented")
}
func (UnimplementedGatewayAPIServer) mustEmbedUnimplementedGatewayAPIServer() {}

// UnsafeGatewayAPIServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GatewayAPIServer will
// result in compilation errors.
type UnsafeGatewayAPIServer interface {
	mustEmbedUnimplementedGatewayAPIServer()
}

func RegisterGatewayAPIServer(s grpc.ServiceRegistrar, srv GatewayAPIServer) {
	s.RegisterService(&GatewayAPI_ServiceDesc, srv)
}

func _GatewayAPI_Sync_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(SyncRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(GatewayAPIServer).Sync(m, &gatewayAPISyncServer{stream})
}

type GatewayAPI_SyncServer interface {
	Send(*VideoNodeConfig) error
	grpc.ServerStream
}

type gatewayAPISyncServer struct {
	grpc.ServerStream
}

func (x *gatewayAPISyncServer) Send(m *VideoNodeConfig) error {
	return x.ServerStream.SendMsg(m)
}

// GatewayAPI_ServiceDesc is the grpc.ServiceDesc for GatewayAPI service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var GatewayAPI_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "gateway.GatewayAPI",
	HandlerType: (*GatewayAPIServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Sync",
			Handler:       _GatewayAPI_Sync_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "gateway/gateway.proto",
}
